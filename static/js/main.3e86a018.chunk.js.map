{"version":3,"sources":["redux/todoSlice.js","components/AddTodoForm.js","components/TodoItem.js","components/TodoList.js","components/TotalCompleteItems.js","components/ToggleMode.js","App.js","redux/store.js","index.js"],"names":["todoSlice","createSlice","name","initialState","id","uuid","title","completed","reducers","addTodo","state","action","todo","payload","push","markComplete","index","findIndex","deleteItem","filter","actions","AddTodoForm","useState","value","setValue","dispatch","useDispatch","onSubmit","event","preventDefault","className","type","placeholder","onChange","target","TodoItem","isActive","setActive","markCompleteds","deleteAction","onClick","TodoList","todos","useSelector","map","TotalCompleteItems","uncompleted","length","ToggleMode","darkMode","setDarkMode","document","body","classList","toggle","App","configureStore","reducer","todoReducer","ReactDOM","render","StrictMode","store","path","element","getElementById"],"mappings":"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","file":"static/js/main.3e86a018.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n//Random ID\nimport { v4 as uuid } from \"uuid\";\n\nexport const todoSlice = createSlice({\n  name: \"todos\",\n  initialState: [\n    { id: uuid(), title: \"Make a to do list\", completed: false },\n    { id: uuid(), title: \"Check off the first item\", completed: false },\n    {\n      id: uuid(),\n      title: \"Realize you already did two things on the list\",\n      completed: false,\n    },\n    {\n      id: uuid(),\n      title: \"Reward yourself with a nice cup of coffee\",\n      completed: false,\n    },\n  ],\n  reducers: {\n    addTodo: (state, action) => {\n      const todo = {\n        id: uuid(),\n        title: action.payload.title,\n        completed: false,\n      };\n      state.push(todo);\n    },\n    markComplete: (state, action) => {\n      const index = state.findIndex((todo) => todo.id === action.payload.id);\n      state[index].completed = action.payload.completed;\n    },\n    deleteItem: (state, action) => {\n      return state.filter((todo) => todo.id !== action.payload.id);\n    },\n  },\n});\n\nexport const { addTodo, markComplete, deleteItem } = todoSlice.actions;\n\nexport default todoSlice.reducer;\n","import React, { useState } from \"react\";\n//Redux\nimport { useDispatch } from \"react-redux\";\nimport { addTodo } from \"../redux/todoSlice\";\n\nconst AddTodoForm = () => {\n  const [value, setValue] = useState(\"\");\n  const dispatch = useDispatch();\n  const onSubmit = (event) => {\n    event.preventDefault();\n    if (value) {\n      dispatch(addTodo({ title: value }));\n    }\n  };\n  return (\n    <form onSubmit={onSubmit} className=\"form-input\">\n      <input\n        type=\"text\"\n        placeholder=\"Add Todo...\"\n        value={value}\n        onChange={(event) => setValue(event.target.value)}\n      ></input>\n      <button className=\"smooth-transition\" type=\"submit \">\n        +\n      </button>\n    </form>\n  );\n};\n\nexport default AddTodoForm;\n","import React from \"react\";\nimport { useState } from \"react\";\n//Redux\nimport { useDispatch } from \"react-redux\";\nimport { markComplete, deleteItem } from \"../redux/todoSlice\";\nconst TodoItem = ({ id, title, completed }) => {\n  const dispatch = useDispatch();\n  const [isActive, setActive] = useState(false);\n  const markCompleteds = () => {\n    dispatch(markComplete({ id, completed: !completed }));\n    setActive(!isActive);\n  };\n  const deleteAction = () => {\n    dispatch(deleteItem({ id }));\n  };\n  return (\n    <>\n      {isActive ? (\n        <li className=\"todo-item completed\">\n          <section className=\"item\">\n            <label className=\"item-name\">\n              <input\n                type=\"checkbox\"\n                onClick={() => {\n                  markCompleteds();\n                }}\n              ></input>\n              <div className=\"checkmark smooth-transition\"></div>\n            </label>\n            <p>{title}</p>\n          </section>\n          <section>\n            <button\n              onClick={() => {\n                deleteAction();\n              }}\n            >\n              X\n            </button>\n          </section>\n        </li>\n      ) : (\n        <li className=\"todo-item\">\n          <section className=\"item\">\n            <label className=\"item-name\">\n              <input\n                type=\"checkbox\"\n                onClick={() => {\n                  markCompleteds();\n                }}\n              ></input>\n              <div className=\"checkmark smooth-transition\"></div>\n            </label>\n            <p>{title}</p>\n          </section>\n          <section>\n            <button\n              onClick={() => {\n                deleteAction();\n              }}\n            >\n              X\n            </button>\n          </section>\n        </li>\n      )}\n    </>\n  );\n};\n\nexport default TodoItem;\n","import React from \"react\";\n//Redux\nimport TodoItem from \"./TodoItem\";\nimport { useSelector } from \"react-redux\";\n\nconst TodoList = () => {\n  const todos = useSelector((state) => state.todos);\n  return (\n    <ul className=\"todo-list\">\n      {todos.map((todo, id) => (\n        <TodoItem\n          key={id}\n          id={todo.id}\n          title={todo.title}\n          completed={todo.completed}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default TodoList;\n","import React from \"react\";\n//Redux\nimport { useSelector } from \"react-redux\";\n\nconst TotalCompleteItems = () => {\n  const completed = useSelector((state) =>\n    state.todos.filter((todo) => todo.completed === true)\n  );\n  const uncompleted = useSelector((state) =>\n    state.todos.filter((todo) => todo.completed === false)\n  );\n  return (\n    <section className=\"total-complete-items\">\n      <p>Tasks: {uncompleted.length}</p>\n      <p>Completed: {completed.length}</p>\n    </section>\n  );\n};\n\nexport default TotalCompleteItems;\n","import { FaMoon, FaSun } from \"react-icons/fa\";\nimport { useState } from \"react\";\n\nexport default function ToggleMode() {\n  const [darkMode, setDarkMode] = useState(false);\n  const changeTheme = () => {\n    document.body.classList.toggle(\"dark\");\n    setDarkMode(!darkMode);\n  };\n  return (\n    <section className=\"toggle\" onClick={changeTheme}>\n      {darkMode ? (\n        <section className=\"toggle-light\">\n          <FaSun />\n        </section>\n      ) : (\n        <section className=\"toggle-dark\">\n          <FaMoon />\n        </section>\n      )}\n    </section>\n  );\n}\n","import React from \"react\";\nimport AddTodoForm from \"./components/AddTodoForm\";\nimport TodoList from \"./components/TodoList\";\nimport TotalCompleteItems from \"./components/TotalCompleteItems\";\nimport ToggleMode from \"./components/ToggleMode\";\n\nconst App = () => {\n  return (\n    <>\n      <header>\n        <section className=\"title-section\">\n          <h1>What Todo</h1>\n          <ToggleMode />\n        </section>\n      </header>\n      <main>\n        <section className=\"todo-section\">\n          <AddTodoForm />\n          <TodoList />\n        </section>\n      </main>\n      <footer className=\"summary-section\">\n        <TotalCompleteItems />\n      </footer>\n    </>\n  );\n};\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport todoReducer from \"./todoSlice\";\n\nexport default configureStore({\n  reducer: {\n    todos: todoReducer,\n  },\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n//Styles\nimport \"../src/assets/index.css\";\nimport App from \"./App\";\n//Redux\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Provider store={store}>\n        <Routes>\n          <Route path=\"/what-todo\" element={<App />} />\n        </Routes>\n      </Provider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}